'use client'; // üëà ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ Next.js ‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Client Component

import { useState } from 'react';
import styles from "./page.module.css"; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå CSS ‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà

export default function Home() {
  // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ To-do
  const [todos, setTodos] = useState([]);

  // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Input
  const [inputValue, setInputValue] = useState('');

  // 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° To-do ‡πÉ‡∏´‡∏°‡πà
  const addTodo = () => {
    if (inputValue.trim() === '') return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

    const newTodo = {
      id: Date.now(), // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô ID ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      text: inputValue,
      isCompleted: false, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
    };

    setTodos([...todos, newTodo]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° To-do ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    setInputValue(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á Input
  };

  // 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Completed/Uncompleted)
  const toggleTodo = (id) => {
    setTodos(
      todos.map(todo =>
        todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo
      )
    );
  };

  return (
    <div className={styles.page}>
      <main className={styles.main}>
        <h1>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ (Todo List)</h1>
        
        {/* === ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°: ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° (Requirement 1 & 2) === */}
        <div className={styles.inputArea}>
          {/* ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Requirement 1) */}
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                addTodo();
              }
            }}
            placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà..."
            className={styles.todoInput}
          />

          {/* ‡∏õ‡∏∏‡πà‡∏° Add ‡πÄ‡∏Ç‡πâ‡∏≤ List (Requirement 2) */}
          <button onClick={addTodo} className={styles.addButton}>
            ‡πÄ‡∏û‡∏¥‡πà‡∏°
          </button>
        </div>

        {/* === ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ To-do (Requirement 3) === */}
        <ul className={styles.todoList}>
          {todos.map(todo => (
            <li key={todo.id} className={styles.todoItem}>
              {/* Checkbox (Requirement 3) */}
              <input
                type="checkbox"
                checked={todo.isCompleted}
                onChange={() => toggleTodo(todo.id)}
                className={styles.todoCheckbox}
              />

              {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° To-do ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏µ‡∏î‡∏Ü‡πà‡∏≤‡∏´‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß */}
              <span
                style={{ textDecoration: todo.isCompleted ? 'line-through' : 'none' }}
                className={styles.todoText}
              >
                {todo.text}
              </span>
            </li>
          ))}
        </ul>

      </main>
      
      {/* ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô footer ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î Next.js template ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ */}
      {/* ... ‡πÇ‡∏Ñ‡πâ‡∏î footer ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ... */}
      
    </div>
  );
}